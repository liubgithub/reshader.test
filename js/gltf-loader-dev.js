/*!
 * @maptalks/gltf-loader v0.1.6
 * LICENSE : UNLICENSED
 * (c) 2016-2019 maptalks.org
 */
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = global || self, factory(global.gltf = {}));
}(this, function (exports) { 'use strict';

	var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var zousanMin = createCommonjsModule(function (module) {
	!function(i){var c,s,u="fulfilled",f="undefined",a=function(){var e=[],n=0;function o(){for(;e.length-n;){try{e[n]();}catch(t){i.console&&i.console.error(t);}e[n++]=s,1024==n&&(e.splice(0,1024),n=0);}}var r=function(){if(typeof MutationObserver===f)return typeof process!==f&&"function"==typeof process.nextTick?function(){process.nextTick(o);}:typeof setImmediate!==f?function(){setImmediate(o);}:function(){setTimeout(o,0);};var t=document.createElement("div");return new MutationObserver(o).observe(t,{attributes:!0}),function(){t.setAttribute("a",0);}}();return function(t){e.push(t),e.length-n==1&&r();}}();function l(t){if(!(this instanceof l))throw new TypeError("Zousan must be created with the new keyword");if("function"==typeof t){var e=this;try{t(function(t){e.resolve(t);},function(t){e.reject(t);});}catch(t){e.reject(t);}}else if(0<arguments.length)throw new TypeError("Zousan resolver "+t+" is not a function")}function h(e,t){if("function"==typeof e.y)try{var n=e.y.call(s,t);e.p.resolve(n);}catch(t){e.p.reject(t);}else e.p.resolve(t);}function v(e,t){if("function"==typeof e.n)try{var n=e.n.call(s,t);e.p.resolve(n);}catch(t){e.p.reject(t);}else e.p.reject(t);}l.prototype={resolve:function(n){if(this.state===c){if(n===this)return this.reject(new TypeError("Attempt to resolve promise with self"));var o=this;if(n&&("function"==typeof n||"object"==typeof n))try{var e=!0,t=n.then;if("function"==typeof t)return void t.call(n,function(t){e&&(e=!1,o.resolve(t));},function(t){e&&(e=!1,o.reject(t));})}catch(t){return void(e&&this.reject(t))}this.state=u,this.v=n,o.c&&a(function(){for(var t=0,e=o.c.length;t<e;t++)h(o.c[t],n);});}},reject:function(n){if(this.state===c){var t=this;this.state="rejected",this.v=n;var o=this.c;a(o?function(){for(var t=0,e=o.length;t<e;t++)v(o[t],n);}:function(){t.handled||!l.suppressUncaughtRejectionError&&i.console&&l.warn("You upset Zousan. Please catch rejections: ",n,n?n.stack:null);});}},then:function(t,e){var n=new l,o={y:t,n:e,p:n};if(this.state===c)this.c?this.c.push(o):this.c=[o];else{var r=this.state,i=this.v;this.handled=!0,a(function(){r===u?h(o,i):v(o,i);});}return n},catch:function(t){return this.then(null,t)},finally:function(t){return this.then(t,t)},timeout:function(t,o){o=o||"Timeout";var r=this;return new l(function(e,n){setTimeout(function(){n(Error(o));},t),r.then(function(t){e(t);},function(t){n(t);});})}},l.resolve=function(t){var e=new l;return e.resolve(t),e},l.reject=function(t){var e=new l;return e.c=[],e.reject(t),e},l.all=function(n){var o=[],r=0,i=new l;function t(t,e){t&&"function"==typeof t.then||(t=l.resolve(t)),t.then(function(t){o[e]=t,++r==n.length&&i.resolve(o);},function(t){i.reject(t);});}for(var e=0;e<n.length;e++)t(n[e],e);return n.length||i.resolve(o),i},l.warn=console.warn,module.exports&&(module.exports=l),i.define&&i.define.amd&&i.define([],function(){return l}),(i.Zousan=l).soon=a;}("undefined"!=typeof commonjsGlobal?commonjsGlobal:commonjsGlobal);
	});

	var promise;

	if (typeof Promise !== 'undefined') {
	  promise = Promise;
	} else {
	  promise = zousanMin;
	}

	var Promise$1 = promise;

	var Ajax = {
	  get: function get(url, options) {
	    var client = Ajax._getClient();

	    var promise = new Promise$1(function (resolve, reject) {
	      client.open('GET', url, true);

	      if (options) {
	        for (var k in options.headers) {
	          client.setRequestHeader(k, options.headers[k]);
	        }

	        client.withCredentials = options.credentials === 'include';

	        if (options['responseType']) {
	          client.responseType = options['responseType'];
	        }
	      }

	      client.onreadystatechange = Ajax._wrapCallback(client, function (err, data) {
	        if (err) {
	          reject(err);
	          return;
	        }

	        resolve(data);
	      });
	      client.send(null);
	    });
	    promise.xhr = client;
	    return promise;
	  },
	  _wrapCallback: function _wrapCallback(client, cb) {
	    return function () {
	      if (client.readyState === 4) {
	        if (client.status === 200) {
	          if (client.responseType === 'arraybuffer') {
	            var response = client.response;

	            if (response.byteLength === 0) {
	              cb(new Error('http status 200 returned without content.'));
	            } else {
	              cb(null, {
	                data: client.response,
	                cacheControl: client.getResponseHeader('Cache-Control'),
	                expires: client.getResponseHeader('Expires'),
	                contentType: client.getResponseHeader('Content-Type')
	              });
	            }
	          } else {
	            cb(null, client.responseText);
	          }
	        } else {
	          if (client.status === 0) {
	            return;
	          }

	          cb(new Error(client.statusText + ',' + client.status));
	        }
	      }
	    };
	  },
	  _getClient: function _getClient() {
	    var client;

	    try {
	      client = new XMLHttpRequest();
	    } catch (e) {
	      try {
	        client = new ActiveXObject('Msxml2.XMLHTTP');
	      } catch (e) {
	        try {
	          client = new ActiveXObject('Microsoft.XMLHTTP');
	        } catch (e) {}
	      }
	    }

	    return client;
	  },
	  getArrayBuffer: function getArrayBuffer(url, options) {
	    if (!options) {
	      options = {};
	    }

	    options['responseType'] = 'arraybuffer';
	    return Ajax.get(url, options);
	  }
	};

	Ajax.getJSON = function (url, options) {
	  var promise = Ajax.get(url, options);
	  var p = promise.then(function (data) {
	    return data ? JSON.parse(data) : null;
	  });
	  p.xhr = promise.xhr;
	  return p;
	};

	function isNil(obj) {
	  return obj == null;
	}
	function defined(obj) {
	  return !isNil(obj);
	}
	function isNumber(obj) {
	  return typeof obj === 'number' && isFinite(obj);
	}
	function isString(obj) {
	  if (isNil(obj)) {
	    return false;
	  }

	  return typeof obj === 'string' || obj.constructor !== null && obj.constructor === String;
	}
	function extend(dest) {
	  for (var i = 1; i < arguments.length; i++) {
	    var src = arguments[i];

	    for (var k in src) {
	      dest[k] = src[k];
	    }
	  }

	  return dest;
	}
	function lerp(out, a, b, t) {
	  out = out.map(function (o, i) {
	    o = a[i] + t * (b[i] - a[i]);
	    return o;
	  });
	  return out;
	}

	var V1 = function () {
	  function V1(rootPath, gltf) {
	    this.rootPath = rootPath;
	    this.gltf = gltf;
	  }

	  var _proto = V1.prototype;

	  _proto.iterate = function iterate(cb, propertyName) {
	    var properties = this.gltf[propertyName];

	    if (!properties) {
	      return;
	    }

	    var index = 0;

	    for (var p in properties) {
	      cb(p, properties[p], index++);
	    }
	  };

	  _proto.createNode = function createNode(nodeJSON, meshes) {
	    var node = {};
	    if (defined(nodeJSON.name)) node.name = nodeJSON.name;
	    if (defined(nodeJSON.children)) node.children = nodeJSON.children;
	    if (defined(nodeJSON.jointName)) node.jointName = nodeJSON.jointName;
	    if (defined(nodeJSON.matrix)) node.matrix = nodeJSON.matrix;
	    if (defined(nodeJSON.rotation)) node.rotation = nodeJSON.rotation;
	    if (defined(nodeJSON.scale)) node.scale = nodeJSON.scale;
	    if (defined(nodeJSON.translation)) node.translation = nodeJSON.translation;
	    if (defined(nodeJSON.extras)) node.extras = nodeJSON.extras;

	    if (defined(nodeJSON.meshes)) {
	      node.meshes = nodeJSON.meshes.map(function (m) {
	        return meshes[m];
	      });
	    }

	    return node;
	  };

	  _proto.getBaseColorTexture = function getBaseColorTexture(index) {
	    var material = this.gltf.materials[index];
	    var tech, texId;

	    if (material['instanceTechnique'] && material['instanceTechnique'].values) {
	      tech = material['instanceTechnique'];
	      texId = tech.values['diffuse'];
	    } else {
	      tech = material;
	      texId = tech.values['tex'] || tech.values['diffuse'];
	    }

	    if (texId === undefined || this.gltf.textures === undefined) {
	      return null;
	    }

	    var texture = this.gltf.textures[texId];

	    if (!texture) {
	      return null;
	    }

	    var sampler = this.gltf.samplers[texture.sampler];
	    var info = {
	      format: texture.format || 6408,
	      internalFormat: texture.internalFormat || 6408,
	      type: texture.type || 5121,
	      sampler: sampler,
	      source: this.gltf.images[texture.source]
	    };
	    return info;
	  };

	  _proto.getMaterial = function getMaterial() {
	    return null;
	  };

	  _proto.getAnimations = function getAnimations() {
	    return null;
	  };

	  return V1;
	}();

	var TYPES = ['SCALAR', 1, 'VEC2', 2, 'VEC3', 3, 'VEC4', 4, 'MAT2', 4, 'MAT3', 9, 'MAT4', 16];

	var Accessor = function () {
	  function Accessor(rootPath, gltf, glbBuffer) {
	    this.rootPath = rootPath;
	    this.gltf = gltf;
	    this.glbBuffer = glbBuffer;
	    this.buffers = {};
	    this.requests = {};
	  }

	  var _proto = Accessor.prototype;

	  _proto._requestData = function _requestData(name, accessorName) {
	    var _this = this;

	    var gltf = this.gltf,
	        accessor = gltf.accessors[accessorName];
	    var bufferView = gltf.bufferViews[accessor.bufferView],
	        buffer = gltf.buffers[bufferView.buffer];

	    if (bufferView.buffer === 'binary_glTF' || bufferView.buffer === 'KHR_binary_glTF' || !buffer.uri) {
	      var _this$_toTypedArray = this._toTypedArray(accessorName, this.glbBuffer.buffer, this.glbBuffer.byteOffset),
	          array = _this$_toTypedArray.array,
	          itemSize = _this$_toTypedArray.itemSize;

	      return Promise$1.resolve({
	        name: name,
	        accessorName: accessorName,
	        array: array,
	        itemSize: itemSize
	      });
	    } else {
	      var bin = buffer.uri;
	      var url = buffer.uri.indexOf('data:application/') === 0 ? buffer.uri : this.rootPath + '/' + bin;

	      if (this.requests[url]) {
	        return this.requests[url].then(function () {
	          var _this$_toTypedArray2 = _this._toTypedArray(accessorName, _this.buffers[url]),
	              array = _this$_toTypedArray2.array,
	              itemSize = _this$_toTypedArray2.itemSize;

	          return {
	            name: name,
	            accessorName: accessorName,
	            array: array,
	            itemSize: itemSize
	          };
	        });
	      }

	      var promise = this.requests[url] = Ajax.getArrayBuffer(url, null).then(function (response) {
	        var buffer = response.data;
	        _this.buffers[url] = buffer;

	        var _this$_toTypedArray3 = _this._toTypedArray(accessorName, buffer),
	            array = _this$_toTypedArray3.array,
	            itemSize = _this$_toTypedArray3.itemSize;

	        return {
	          name: name,
	          accessorName: accessorName,
	          array: array,
	          itemSize: itemSize
	        };
	      });
	      return promise;
	    }
	  };

	  _proto._toTypedArray = function _toTypedArray(accessorName, arrayBuffer, offset) {
	    if (offset === void 0) {
	      offset = 0;
	    }

	    var gltf = this.gltf;
	    var accessor = gltf.accessors[accessorName];
	    var bufferView = gltf.bufferViews[accessor.bufferView];
	    var start = (bufferView.byteOffset || 0) + (accessor.byteOffset || 0) + offset;

	    var itemSize = this._getTypeItemSize(accessor.type);

	    var ArrayCtor = this._getArrayCtor(accessor.componentType);

	    var byteStride = accessor.byteStride;

	    if (byteStride && byteStride !== itemSize * ArrayCtor.BYTES_PER_ELEMENT) {
	      console.warn('GLTF interleaved accessors not supported');
	      return new ArrayCtor([]);
	    }

	    if (start % ArrayCtor.BYTES_PER_ELEMENT !== 0) {
	      arrayBuffer = arrayBuffer.slice(start, start + accessor.count * itemSize * ArrayCtor.BYTES_PER_ELEMENT);
	      start = 0;
	    }

	    return {
	      array: new ArrayCtor(arrayBuffer, start, accessor.count * itemSize),
	      itemSize: itemSize
	    };
	  };

	  _proto._getArrayCtor = function _getArrayCtor(componentType) {
	    switch (componentType) {
	      case 0x1400:
	        return Int8Array;

	      case 0x1401:
	        return Uint8Array;

	      case 0x1402:
	        return Int16Array;

	      case 0x1403:
	        return Uint16Array;

	      case 0x1404:
	        return Int32Array;

	      case 0x1405:
	        return Uint32Array;

	      case 0x1406:
	        return Float32Array;
	    }

	    throw new Error('unsupported bufferView\'s componeng type: ' + componentType);
	  };

	  _proto._getTypeItemSize = function _getTypeItemSize(type) {
	    var typeIdx = TYPES.indexOf(type);
	    return TYPES[typeIdx + 1];
	  };

	  return Accessor;
	}();

	var V2 = function () {
	  function V2(rootPath, gltf, glbBuffer, requestImage) {
	    this.rootPath = rootPath;
	    this.gltf = gltf;
	    this.glbBuffer = glbBuffer;
	    this.buffers = {};
	    this.requests = {};
	    this._requestImage = requestImage;
	    this.accessor = new Accessor(rootPath, gltf, glbBuffer);
	  }

	  var _proto = V2.prototype;

	  _proto.iterate = function iterate(cb, propertyName) {
	    var properties = this.gltf[propertyName];

	    if (!properties) {
	      return;
	    }

	    for (var i = 0; i < properties.length; i++) {
	      cb(i, properties[i], i);
	    }
	  };

	  _proto.createNode = function createNode(nodeJSON, meshes, skins) {
	    var node = {};
	    extend(node, nodeJSON);

	    if (defined(nodeJSON.mesh)) {
	      node.meshes = [meshes[nodeJSON.mesh]];
	    }

	    if (defined(nodeJSON.skin)) {
	      node.skin = skins[nodeJSON.skin];
	      node.skinIndex = nodeJSON.skin;
	    }

	    return node;
	  };

	  _proto.getMaterial = function getMaterial(index) {
	    var material = this.gltf.materials[index];
	    var pbrMetallicRoughness = material.pbrMetallicRoughness;
	    var normalTextureInfo = material.normalTexture;
	    var occlusionTextureInfo = material.occlusionTexture;
	    var emissiveTextureInfo = material.emissiveTexture;
	    var promises = [];

	    if (pbrMetallicRoughness) {
	      promises.push(this._getPbrMetallicRoughness(pbrMetallicRoughness));
	    }

	    if (normalTextureInfo) {
	      promises.push(this._getTextureInfo(normalTextureInfo, 'normalTexture'));
	    }

	    if (occlusionTextureInfo) {
	      promises.push(this._getTextureInfo(occlusionTextureInfo, 'occlusionTexture'));
	    }

	    if (emissiveTextureInfo) {
	      promises.push(this._getTextureInfo(emissiveTextureInfo, 'emissiveTexture'));
	    }

	    return Promise$1.all(promises).then(function (assets) {
	      var out = {};
	      extend(out, material);

	      for (var i = 0; i < assets.length; i++) {
	        out[assets[i].name] = assets[i];
	      }

	      return {
	        material: out
	      };
	    });
	  };

	  _proto._getPbrMetallicRoughness = function _getPbrMetallicRoughness(pbrMetallicRoughness) {
	    var baseColorTexture = pbrMetallicRoughness.baseColorTexture;
	    var metallicRoughnessTexture = pbrMetallicRoughness.metallicRoughnessTexture;
	    pbrMetallicRoughness.name = 'pbrMetallicRoughness';
	    var promises = [];

	    if (baseColorTexture) {
	      promises.push(this._getTextureInfo(baseColorTexture, 'baseColorTexture'));
	    }

	    if (metallicRoughnessTexture) {
	      promises.push(this._getTextureInfo(metallicRoughnessTexture, 'metallicRoughnessTexture'));
	    }

	    return Promise$1.all(promises).then(function (assets) {
	      var out = {};
	      extend(out, pbrMetallicRoughness);

	      for (var i = 0; i < assets.length; i++) {
	        delete assets[i].index;
	        out[assets[i].name] = assets[i];
	      }

	      return out;
	    });
	  };

	  _proto._getTextureInfo = function _getTextureInfo(texInfo, name) {
	    var index = texInfo.index;

	    if (!defined(index)) {
	      return null;
	    }

	    texInfo.name = name;

	    var promise = this._getTexture(index);

	    return promise.then(function (result) {
	      var out = {
	        texture: result
	      };
	      extend(out, texInfo);
	      delete out.index;
	      return out;
	    });
	  };

	  _proto._getTexture = function _getTexture(index) {
	    var _this = this;

	    var texture = this.gltf.textures[index];

	    if (!texture) {
	      return null;
	    }

	    var image = this.gltf.images[texture.source];

	    var promise = this._loadImage(image);

	    return promise.then(function (response) {
	      var out = {
	        image: {
	          array: response.data,
	          width: response.width,
	          height: response.height,
	          index: texture.source,
	          mimeType: image.mimeType,
	          name: image.name,
	          extensions: image.extensions,
	          extras: image.extras
	        }
	      };
	      extend(out, texture);
	      delete out.sampler;
	      var sampler = defined(texture.sampler) ? _this.gltf.samplers[texture.sampler] : undefined;

	      if (sampler) {
	        out.sampler = sampler;
	      }

	      return out;
	    });
	  };

	  _proto._loadImage = function _loadImage(source) {
	    if (defined(source.bufferView)) {
	      var bufferView = this.gltf.bufferViews[source.bufferView];

	      if (this.buffers[source.bufferView]) {
	        return Promise$1.resolve(this.buffers[source.bufferView]);
	      }

	      var bufferObj = this.gltf.buffers[bufferView.buffer];

	      if (bufferObj.uri) {
	        return this._requestFromArrayBuffer(bufferObj.uri, bufferView, source);
	      }

	      if (this.glbBuffer) {
	        return this._requestFromGlbBuffer(bufferView, source);
	      }
	    } else {
	      var file = source.uri;
	      var url = file.indexOf('data:image/') === 0 ? file : this.rootPath + '/' + file;
	      return this._requestFromUrl(url);
	    }

	    return null;
	  };

	  _proto._requestFromUrl = function _requestFromUrl(url) {
	    var _this2 = this;

	    if (this.requests[url]) {
	      return this.requests[url].then(function () {
	        return _this2.buffers[url];
	      });
	    }

	    var promise = this.requests[url] = this._getImageInfo(url, url);

	    return promise;
	  };

	  _proto._requestFromArrayBuffer = function _requestFromArrayBuffer(uri, bufferView, source) {
	    var _this3 = this;

	    var key = source.bufferView;

	    if (this.requests[uri]) {
	      return this.requests[uri].then(function () {
	        return _this3.buffers[key];
	      });
	    }

	    return Ajax.getArrayBuffer(uri, null).then(function (response) {
	      var bufferData = response.data;

	      var dataview = _this3._createDataView(bufferView, bufferData);

	      var blob = new Blob([dataview], {
	        type: source.mimeType
	      });
	      var sourceURI = URL.createObjectURL(blob);
	      return _this3._getImageInfo(key, sourceURI);
	    });
	  };

	  _proto._requestFromGlbBuffer = function _requestFromGlbBuffer(bufferView, source) {
	    var dataview = this._createDataView(bufferView, this.glbBuffer.buffer, this.glbBuffer.byteOffset);

	    var blob = new Blob([dataview], {
	      type: source.mimeType
	    });
	    var sourceURI = URL.createObjectURL(blob);
	    return this._getImageInfo(source.bufferView, sourceURI);
	  };

	  _proto._getImageInfo = function _getImageInfo(key, url) {
	    var _this4 = this;

	    return new Promise$1(function (resolve, reject) {
	      _this4._requestImage(url, function (err, result) {
	        if (err) {
	          reject(err);
	          return;
	        }

	        _this4.buffers[key] = result;
	        resolve(_this4.buffers[key]);
	      });
	    });
	  };

	  _proto._createDataView = function _createDataView(bufferView, bufferData, byteOffset) {
	    byteOffset = !byteOffset ? 0 : byteOffset;
	    var start = bufferView.byteOffset + byteOffset;
	    var length = bufferView.byteLength;
	    var dataview = bufferData.slice(start, start + length);
	    return dataview;
	  };

	  _proto._transformArrayBufferToBase64 = function _transformArrayBufferToBase64(array, mimeType) {
	    var binary = new Array(array.byteLength);

	    for (var i = 0; i < array.byteLength; i++) {
	      binary[i] = String.fromCharCode(array[i]);
	    }

	    binary.join('');
	    mimeType = !mimeType ? 'image/png' : mimeType;
	    var base64Url = 'data:' + mimeType + ';base64,' + window.btoa(unescape(encodeURIComponent(binary)));
	    return base64Url;
	  };

	  _proto.getAnimations = function getAnimations(animations) {
	    var _this5 = this;

	    var promises = [];
	    animations.forEach(function (animation) {
	      promises.push(_this5.getSamplers(animation.samplers));
	    });
	    return Promise$1.all(promises).then(function (assets) {
	      for (var i = 0; i < assets.length; i++) {
	        animations[i].samplers = assets[i];
	      }

	      return animations;
	    });
	  };

	  _proto.getSamplers = function getSamplers(samplers) {
	    var promises = [];

	    for (var i = 0; i < samplers.length; i++) {
	      if (!defined(samplers[i].input) && !defined(samplers[i].output)) continue;
	      promises.push(this.accessor._requestData('input', samplers[i].input));
	      promises.push(this.accessor._requestData('output', samplers[i].output));
	    }

	    return Promise$1.all(promises).then(function (assets) {
	      for (var _i = 0; _i < assets.length / 2; _i++) {
	        samplers[_i].input = assets[_i * 2];
	        samplers[_i].output = assets[_i * 2 + 1];

	        if (!samplers[_i].interpolation) {
	          samplers[_i].interpolation = 'LINEAR';
	        }
	      }

	      return samplers;
	    });
	  };

	  return V2;
	}();

	var textDecoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8') : null;
	var BINARY_EXTENSION_HEADER_LENGTH = 12;
	var BINARY_EXTENSION_CHUNK_TYPES = {
	  JSON: 0x4E4F534A,
	  BIN: 0x004E4942
	};

	var GLBReader = function () {
	  function GLBReader() {}

	  GLBReader.read = function read(glb, glbOffset) {
	    if (glbOffset === void 0) {
	      glbOffset = 0;
	    }

	    var dataView = new DataView(glb, glbOffset);
	    var version = dataView.getUint32(4, true);

	    if (version === 1) {
	      return GLBReader.readV1(dataView, glbOffset);
	    } else if (version === 2) {
	      return GLBReader.readV2(glb, glbOffset);
	    } else {
	      throw new Error('Unsupported glb version : ' + version);
	    }
	  };

	  GLBReader.readV1 = function readV1(dataView, glbOffset) {
	    var length = dataView.getUint32(8, true);
	    var contentLength = dataView.getUint32(12, true);

	    if (length !== dataView.buffer.byteLength - glbOffset) {
	      throw new Error('Length in GLB header is inconsistent with glb\'s byte length.');
	    }

	    var json = readString(dataView.buffer, 20 + glbOffset, contentLength);
	    return {
	      json: JSON.parse(json),
	      glbBuffer: {
	        byteOffset: 20 + glbOffset + contentLength,
	        buffer: dataView.buffer
	      }
	    };
	  };

	  GLBReader.readV2 = function readV2(glb, glbOffset) {
	    var json, buffer;
	    var chunkView = new DataView(glb, BINARY_EXTENSION_HEADER_LENGTH);
	    var chunkIndex = 0;

	    while (chunkIndex < chunkView.byteLength) {
	      var chunkLength = chunkView.getUint32(chunkIndex, true);
	      chunkIndex += 4;
	      var chunkType = chunkView.getUint32(chunkIndex, true);
	      chunkIndex += 4;

	      if (chunkType === BINARY_EXTENSION_CHUNK_TYPES.JSON) {
	        json = readString(glb, BINARY_EXTENSION_HEADER_LENGTH + chunkIndex, chunkLength);
	      } else if (chunkType === BINARY_EXTENSION_CHUNK_TYPES.BIN) {
	        var byteOffset = BINARY_EXTENSION_HEADER_LENGTH + chunkIndex;
	        buffer = glb.slice(byteOffset, byteOffset + chunkLength);
	      }

	      chunkIndex += chunkLength;
	    }

	    return {
	      json: JSON.parse(json),
	      glbBuffer: {
	        byteOffset: glbOffset,
	        buffer: buffer
	      }
	    };
	  };

	  return GLBReader;
	}();

	function readString(buffer, offset, byteLength) {
	  if (textDecoder) {
	    var arr = new Uint8Array(buffer, offset, byteLength);
	    return textDecoder.decode(arr);
	  } else {
	    var _arr = new Uint8Array(buffer, offset, byteLength);

	    return stringFromUTF8Array(_arr);
	  }
	}

	var extraByteMap = [1, 1, 1, 1, 2, 2, 3, 0];

	function stringFromUTF8Array(data) {
	  var count = data.length;
	  var str = '';

	  for (var index = 0; index < count;) {
	    var ch = data[index++];

	    if (ch & 0x80) {
	      var extra = extraByteMap[ch >> 3 & 0x07];
	      if (!(ch & 0x40) || !extra || index + extra > count) return null;
	      ch = ch & 0x3F >> extra;

	      for (; extra > 0; extra -= 1) {
	        var chx = data[index++];
	        if ((chx & 0xC0) !== 0x80) return null;
	        ch = ch << 6 | chx & 0x3F;
	      }
	    }

	    str += String.fromCharCode(ch);
	  }

	  return str;
	}

	/**
	 * Common utilities
	 * @module glMatrix
	 */

	// Configuration Constants
	var EPSILON = 0.000001;
	var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;

	var degree = Math.PI / 180;

	/**
	 * 3x3 Matrix
	 * @module mat3
	 */

	/**
	 * Creates a new identity mat3
	 *
	 * @returns {mat3} a new 3x3 matrix
	 */
	function create$2() {
	  var out = new ARRAY_TYPE(9);
	  if (ARRAY_TYPE != Float32Array) {
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[5] = 0;
	    out[6] = 0;
	    out[7] = 0;
	  }
	  out[0] = 1;
	  out[4] = 1;
	  out[8] = 1;
	  return out;
	}

	/**
	 * Creates a matrix from a quaternion rotation, vector translation and vector scale
	 * This is equivalent to (but much faster than):
	 *
	 *     mat4.identity(dest);
	 *     mat4.translate(dest, vec);
	 *     let quatMat = mat4.create();
	 *     quat4.toMat4(quat, quatMat);
	 *     mat4.multiply(dest, quatMat);
	 *     mat4.scale(dest, scale)
	 *
	 * @param {mat4} out mat4 receiving operation result
	 * @param {quat4} q Rotation quaternion
	 * @param {vec3} v Translation vector
	 * @param {vec3} s Scaling vector
	 * @returns {mat4} out
	 */
	function fromRotationTranslationScale(out, q, v, s) {
	  // Quaternion math
	  var x = q[0],
	      y = q[1],
	      z = q[2],
	      w = q[3];
	  var x2 = x + x;
	  var y2 = y + y;
	  var z2 = z + z;

	  var xx = x * x2;
	  var xy = x * y2;
	  var xz = x * z2;
	  var yy = y * y2;
	  var yz = y * z2;
	  var zz = z * z2;
	  var wx = w * x2;
	  var wy = w * y2;
	  var wz = w * z2;
	  var sx = s[0];
	  var sy = s[1];
	  var sz = s[2];

	  out[0] = (1 - (yy + zz)) * sx;
	  out[1] = (xy + wz) * sx;
	  out[2] = (xz - wy) * sx;
	  out[3] = 0;
	  out[4] = (xy - wz) * sy;
	  out[5] = (1 - (xx + zz)) * sy;
	  out[6] = (yz + wx) * sy;
	  out[7] = 0;
	  out[8] = (xz + wy) * sz;
	  out[9] = (yz - wx) * sz;
	  out[10] = (1 - (xx + yy)) * sz;
	  out[11] = 0;
	  out[12] = v[0];
	  out[13] = v[1];
	  out[14] = v[2];
	  out[15] = 1;

	  return out;
	}

	/**
	 * 3 Dimensional Vector
	 * @module vec3
	 */

	/**
	 * Creates a new, empty vec3
	 *
	 * @returns {vec3} a new 3D vector
	 */
	function create$4() {
	  var out = new ARRAY_TYPE(3);
	  if (ARRAY_TYPE != Float32Array) {
	    out[0] = 0;
	    out[1] = 0;
	    out[2] = 0;
	  }
	  return out;
	}

	/**
	 * Calculates the length of a vec3
	 *
	 * @param {vec3} a vector to calculate length of
	 * @returns {Number} length of a
	 */
	function length(a) {
	  var x = a[0];
	  var y = a[1];
	  var z = a[2];
	  return Math.sqrt(x * x + y * y + z * z);
	}

	/**
	 * Creates a new vec3 initialized with the given values
	 *
	 * @param {Number} x X component
	 * @param {Number} y Y component
	 * @param {Number} z Z component
	 * @returns {vec3} a new 3D vector
	 */
	function fromValues$4(x, y, z) {
	  var out = new ARRAY_TYPE(3);
	  out[0] = x;
	  out[1] = y;
	  out[2] = z;
	  return out;
	}

	/**
	 * Normalize a vec3
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a vector to normalize
	 * @returns {vec3} out
	 */
	function normalize(out, a) {
	  var x = a[0];
	  var y = a[1];
	  var z = a[2];
	  var len = x * x + y * y + z * z;
	  if (len > 0) {
	    //TODO: evaluate use of glm_invsqrt here?
	    len = 1 / Math.sqrt(len);
	    out[0] = a[0] * len;
	    out[1] = a[1] * len;
	    out[2] = a[2] * len;
	  }
	  return out;
	}

	/**
	 * Calculates the dot product of two vec3's
	 *
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {Number} dot product of a and b
	 */
	function dot(a, b) {
	  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
	}

	/**
	 * Computes the cross product of two vec3's
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {vec3} out
	 */
	function cross(out, a, b) {
	  var ax = a[0],
	      ay = a[1],
	      az = a[2];
	  var bx = b[0],
	      by = b[1],
	      bz = b[2];

	  out[0] = ay * bz - az * by;
	  out[1] = az * bx - ax * bz;
	  out[2] = ax * by - ay * bx;
	  return out;
	}

	/**
	 * Alias for {@link vec3.length}
	 * @function
	 */
	var len = length;

	/**
	 * Perform some operation over an array of vec3s.
	 *
	 * @param {Array} a the array of vectors to iterate over
	 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
	 * @param {Number} offset Number of elements to skip at the beginning of the array
	 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
	 * @param {Function} fn Function to call for each vector in the array
	 * @param {Object} [arg] additional argument to pass to fn
	 * @returns {Array} a
	 * @function
	 */
	var forEach = function () {
	  var vec = create$4();

	  return function (a, stride, offset, count, fn, arg) {
	    var i = void 0,
	        l = void 0;
	    if (!stride) {
	      stride = 3;
	    }

	    if (!offset) {
	      offset = 0;
	    }

	    if (count) {
	      l = Math.min(count * stride + offset, a.length);
	    } else {
	      l = a.length;
	    }

	    for (i = offset; i < l; i += stride) {
	      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];
	      fn(vec, vec, arg);
	      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];
	    }

	    return a;
	  };
	}();

	/**
	 * 4 Dimensional Vector
	 * @module vec4
	 */

	/**
	 * Creates a new, empty vec4
	 *
	 * @returns {vec4} a new 4D vector
	 */
	function create$5() {
	  var out = new ARRAY_TYPE(4);
	  if (ARRAY_TYPE != Float32Array) {
	    out[0] = 0;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	  }
	  return out;
	}

	/**
	 * Normalize a vec4
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a vector to normalize
	 * @returns {vec4} out
	 */
	function normalize$1(out, a) {
	  var x = a[0];
	  var y = a[1];
	  var z = a[2];
	  var w = a[3];
	  var len = x * x + y * y + z * z + w * w;
	  if (len > 0) {
	    len = 1 / Math.sqrt(len);
	    out[0] = x * len;
	    out[1] = y * len;
	    out[2] = z * len;
	    out[3] = w * len;
	  }
	  return out;
	}

	/**
	 * Perform some operation over an array of vec4s.
	 *
	 * @param {Array} a the array of vectors to iterate over
	 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
	 * @param {Number} offset Number of elements to skip at the beginning of the array
	 * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
	 * @param {Function} fn Function to call for each vector in the array
	 * @param {Object} [arg] additional argument to pass to fn
	 * @returns {Array} a
	 * @function
	 */
	var forEach$1 = function () {
	  var vec = create$5();

	  return function (a, stride, offset, count, fn, arg) {
	    var i = void 0,
	        l = void 0;
	    if (!stride) {
	      stride = 4;
	    }

	    if (!offset) {
	      offset = 0;
	    }

	    if (count) {
	      l = Math.min(count * stride + offset, a.length);
	    } else {
	      l = a.length;
	    }

	    for (i = offset; i < l; i += stride) {
	      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];vec[3] = a[i + 3];
	      fn(vec, vec, arg);
	      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];a[i + 3] = vec[3];
	    }

	    return a;
	  };
	}();

	/**
	 * Quaternion
	 * @module quat
	 */

	/**
	 * Creates a new identity quat
	 *
	 * @returns {quat} a new quaternion
	 */
	function create$6() {
	  var out = new ARRAY_TYPE(4);
	  if (ARRAY_TYPE != Float32Array) {
	    out[0] = 0;
	    out[1] = 0;
	    out[2] = 0;
	  }
	  out[3] = 1;
	  return out;
	}

	/**
	 * Sets a quat from the given angle and rotation axis,
	 * then returns it.
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {vec3} axis the axis around which to rotate
	 * @param {Number} rad the angle in radians
	 * @returns {quat} out
	 **/
	function setAxisAngle(out, axis, rad) {
	  rad = rad * 0.5;
	  var s = Math.sin(rad);
	  out[0] = s * axis[0];
	  out[1] = s * axis[1];
	  out[2] = s * axis[2];
	  out[3] = Math.cos(rad);
	  return out;
	}

	/**
	 * Performs a spherical linear interpolation between two quat
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a the first operand
	 * @param {quat} b the second operand
	 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
	 * @returns {quat} out
	 */
	function slerp(out, a, b, t) {
	  // benchmarks:
	  //    http://jsperf.com/quaternion-slerp-implementations
	  var ax = a[0],
	      ay = a[1],
	      az = a[2],
	      aw = a[3];
	  var bx = b[0],
	      by = b[1],
	      bz = b[2],
	      bw = b[3];

	  var omega = void 0,
	      cosom = void 0,
	      sinom = void 0,
	      scale0 = void 0,
	      scale1 = void 0;

	  // calc cosine
	  cosom = ax * bx + ay * by + az * bz + aw * bw;
	  // adjust signs (if necessary)
	  if (cosom < 0.0) {
	    cosom = -cosom;
	    bx = -bx;
	    by = -by;
	    bz = -bz;
	    bw = -bw;
	  }
	  // calculate coefficients
	  if (1.0 - cosom > EPSILON) {
	    // standard case (slerp)
	    omega = Math.acos(cosom);
	    sinom = Math.sin(omega);
	    scale0 = Math.sin((1.0 - t) * omega) / sinom;
	    scale1 = Math.sin(t * omega) / sinom;
	  } else {
	    // "from" and "to" quaternions are very close
	    //  ... so we can do a linear interpolation
	    scale0 = 1.0 - t;
	    scale1 = t;
	  }
	  // calculate final values
	  out[0] = scale0 * ax + scale1 * bx;
	  out[1] = scale0 * ay + scale1 * by;
	  out[2] = scale0 * az + scale1 * bz;
	  out[3] = scale0 * aw + scale1 * bw;

	  return out;
	}

	/**
	 * Creates a quaternion from the given 3x3 rotation matrix.
	 *
	 * NOTE: The resultant quaternion is not normalized, so you should be sure
	 * to renormalize the quaternion yourself where necessary.
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {mat3} m rotation matrix
	 * @returns {quat} out
	 * @function
	 */
	function fromMat3(out, m) {
	  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
	  // article "Quaternion Calculus and Fast Animation".
	  var fTrace = m[0] + m[4] + m[8];
	  var fRoot = void 0;

	  if (fTrace > 0.0) {
	    // |w| > 1/2, may as well choose w > 1/2
	    fRoot = Math.sqrt(fTrace + 1.0); // 2w
	    out[3] = 0.5 * fRoot;
	    fRoot = 0.5 / fRoot; // 1/(4w)
	    out[0] = (m[5] - m[7]) * fRoot;
	    out[1] = (m[6] - m[2]) * fRoot;
	    out[2] = (m[1] - m[3]) * fRoot;
	  } else {
	    // |w| <= 1/2
	    var i = 0;
	    if (m[4] > m[0]) i = 1;
	    if (m[8] > m[i * 3 + i]) i = 2;
	    var j = (i + 1) % 3;
	    var k = (i + 2) % 3;

	    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
	    out[i] = 0.5 * fRoot;
	    fRoot = 0.5 / fRoot;
	    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
	    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
	    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
	  }

	  return out;
	}

	/**
	 * Normalize a quat
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a quaternion to normalize
	 * @returns {quat} out
	 * @function
	 */
	var normalize$2 = normalize$1;

	/**
	 * Sets a quaternion to represent the shortest rotation from one
	 * vector to another.
	 *
	 * Both vectors are assumed to be unit length.
	 *
	 * @param {quat} out the receiving quaternion.
	 * @param {vec3} a the initial vector
	 * @param {vec3} b the destination vector
	 * @returns {quat} out
	 */
	var rotationTo = function () {
	  var tmpvec3 = create$4();
	  var xUnitVec3 = fromValues$4(1, 0, 0);
	  var yUnitVec3 = fromValues$4(0, 1, 0);

	  return function (out, a, b) {
	    var dot$$1 = dot(a, b);
	    if (dot$$1 < -0.999999) {
	      cross(tmpvec3, xUnitVec3, a);
	      if (len(tmpvec3) < 0.000001) cross(tmpvec3, yUnitVec3, a);
	      normalize(tmpvec3, tmpvec3);
	      setAxisAngle(out, tmpvec3, Math.PI);
	      return out;
	    } else if (dot$$1 > 0.999999) {
	      out[0] = 0;
	      out[1] = 0;
	      out[2] = 0;
	      out[3] = 1;
	      return out;
	    } else {
	      cross(tmpvec3, a, b);
	      out[0] = tmpvec3[0];
	      out[1] = tmpvec3[1];
	      out[2] = tmpvec3[2];
	      out[3] = 1 + dot$$1;
	      return normalize$2(out, out);
	    }
	  };
	}();

	/**
	 * Performs a spherical linear interpolation with two control points
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a the first operand
	 * @param {quat} b the second operand
	 * @param {quat} c the third operand
	 * @param {quat} d the fourth operand
	 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
	 * @returns {quat} out
	 */
	var sqlerp = function () {
	  var temp1 = create$6();
	  var temp2 = create$6();

	  return function (out, a, b, c, d, t) {
	    slerp(temp1, a, d, t);
	    slerp(temp2, b, c, t);
	    slerp(out, temp1, temp2, 2 * t * (1 - t));

	    return out;
	  };
	}();

	/**
	 * Sets the specified quaternion with values corresponding to the given
	 * axes. Each axis is a vec3 and is expected to be unit length and
	 * perpendicular to all other specified axes.
	 *
	 * @param {vec3} view  the vector representing the viewing direction
	 * @param {vec3} right the vector representing the local "right" direction
	 * @param {vec3} up    the vector representing the local "up" direction
	 * @returns {quat} out
	 */
	var setAxes = function () {
	  var matr = create$2();

	  return function (out, view, right, up) {
	    matr[0] = right[0];
	    matr[3] = right[1];
	    matr[6] = right[2];

	    matr[1] = up[0];
	    matr[4] = up[1];
	    matr[7] = up[2];

	    matr[2] = -view[0];
	    matr[5] = -view[1];
	    matr[8] = -view[2];

	    return normalize$2(out, fromMat3(out, matr));
	  };
	}();

	/**
	 * 2 Dimensional Vector
	 * @module vec2
	 */

	/**
	 * Creates a new, empty vec2
	 *
	 * @returns {vec2} a new 2D vector
	 */
	function create$8() {
	  var out = new ARRAY_TYPE(2);
	  if (ARRAY_TYPE != Float32Array) {
	    out[0] = 0;
	    out[1] = 0;
	  }
	  return out;
	}

	/**
	 * Perform some operation over an array of vec2s.
	 *
	 * @param {Array} a the array of vectors to iterate over
	 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
	 * @param {Number} offset Number of elements to skip at the beginning of the array
	 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
	 * @param {Function} fn Function to call for each vector in the array
	 * @param {Object} [arg] additional argument to pass to fn
	 * @returns {Array} a
	 * @function
	 */
	var forEach$2 = function () {
	  var vec = create$8();

	  return function (a, stride, offset, count, fn, arg) {
	    var i = void 0,
	        l = void 0;
	    if (!stride) {
	      stride = 2;
	    }

	    if (!offset) {
	      offset = 0;
	    }

	    if (count) {
	      l = Math.min(count * stride + offset, a.length);
	    } else {
	      l = a.length;
	    }

	    for (i = offset; i < l; i += stride) {
	      vec[0] = a[i];vec[1] = a[i + 1];
	      fn(vec, vec, arg);
	      a[i] = vec[0];a[i + 1] = vec[1];
	    }

	    return a;
	  };
	}();

	var AnimationClip = {
	  _getTRSW: function _getTRSW(gltf, trsw, node, time) {
	    var _this = this;

	    var animations = gltf.animations;
	    animations.forEach(function (animation) {
	      var channels = animation.channels;

	      for (var i = 0; i < channels.length; i++) {
	        var channel = channels[i];

	        if (channel.target.node === node) {
	          if (channel.target.path === 'translation') {
	            trsw.T = _this._getAnimateData(trsw.T, animation.samplers[channel.sampler], time, 1);
	          } else if (channel.target.path === 'rotation') {
	            trsw.R = _this._getQuaternion(trsw.R, animation.samplers[channel.sampler], time, 1);
	          } else if (channel.target.path === 'scale') {
	            trsw.S = _this._getAnimateData(trsw.S, animation.samplers[channel.sampler], time, 1);
	          } else if (channel.target.path === 'weights') {
	            trsw.W = _this._getAnimateData(trsw.W, animation.samplers[channel.sampler], time, trsw.W.length);
	          }
	        }
	      }
	    });
	    return trsw;
	  },
	  _getAnimateData: function _getAnimateData(out, sampler, time, stride) {
	    switch (sampler.interpolation) {
	      case 'LINEAR':
	        {
	          var preNext = this._getPreNext(sampler, time, 1 * stride);

	          if (preNext) {
	            out = lerp(out, preNext.previous, preNext.next, preNext.interpolation.value);
	          }

	          break;
	        }

	      case 'STEP':
	        {
	          var _preNext = this._getPreNext(sampler, time, 1 * stride);

	          if (_preNext) {
	            out = _preNext.previous;
	          }

	          break;
	        }

	      case 'CUBICSPLINE':
	        {
	          var _preNext2 = this._getPreNext(sampler, time, 3 * stride);

	          if (_preNext2) {
	            out = this._getCubicSpline(_preNext2.interpolation, _preNext2.previous, _preNext2.next, sampler.input.array, 3 * stride);
	          }

	          break;
	        }
	    }

	    return out;
	  },
	  _getQuaternion: function _getQuaternion(out, sampler, time) {
	    switch (sampler.interpolation) {
	      case 'LINEAR':
	        {
	          var preNext = this._getPreNext(sampler, time, 1);

	          if (preNext) {
	            slerp(out, preNext.previous, preNext.next, preNext.interpolation.value);
	          }

	          break;
	        }

	      case 'STEP':
	        {
	          var _preNext3 = this._getPreNext(sampler, time, 1);

	          if (_preNext3) {
	            out = _preNext3.previous;
	          }

	          break;
	        }

	      case 'CUBICSPLINE':
	        {
	          var _preNext4 = this._getPreNext(sampler, time, 3);

	          if (_preNext4) {
	            _preNext4.previous = _preNext4.previous.map(function (d) {
	              return Math.acos(d);
	            });
	            _preNext4.next = _preNext4.next.map(function (d) {
	              return Math.acos(d);
	            });
	            out = this._getCubicSpline(_preNext4.interpolation, _preNext4.previous, _preNext4.next, sampler.input.array, 3);
	            out = out.map(function (value) {
	              return Math.cos(value);
	            });
	          }

	          break;
	        }
	    }

	    return out;
	  },
	  _getPreNext: function _getPreNext(sampler, time, stride) {
	    var input = sampler.input.array;
	    var output = sampler.output.array;
	    var itemSize = sampler.output.itemSize;

	    var interpolation = this._getInterpolation(input, time);

	    if (!interpolation) {
	      return null;
	    }

	    var previous = output.slice(interpolation.preIndex * itemSize * stride, (interpolation.preIndex + 1) * itemSize * stride);
	    var next = output.slice(interpolation.nextIndex * itemSize * stride, (interpolation.nextIndex + 1) * itemSize * stride);
	    return {
	      previous: previous,
	      next: next,
	      interpolation: interpolation
	    };
	  },
	  _getInterpolation: function _getInterpolation(input, time) {
	    if (time < input[0] || time > input[input.length - 1]) {
	      time = Math.max(input[0], Math.min(input[input.length - 1], time));
	    }

	    if (time === input[input.length - 1]) {
	      time = input[0];
	    }

	    for (var i = 0; i < input.length - 1; i++) {
	      if (time >= input[i] && time < input[i + 1]) {
	        var previousTime = input[i];
	        var nextTime = input[i + 1];
	        return {
	          preIndex: i,
	          nextIndex: i + 1,
	          value: (time - previousTime) / (nextTime - previousTime)
	        };
	      }
	    }

	    return null;
	  },
	  _getCubicSpline: function _getCubicSpline(interpolation, previous, next, input, length$$1) {
	    var t = interpolation.value;
	    var vk = previous.slice(length$$1, length$$1 * 2);
	    var bk = previous.slice(length$$1 * 2, length$$1 * 3);
	    var tk = input[interpolation.preIndex];
	    var tk1 = input[interpolation.nextIndex];
	    var ak1 = next.slice(0, length$$1);
	    var vk1 = next.slice(3, length$$1 * 2);
	    var pt = [];

	    for (var i = 0; i < 3; i++) {
	      var p0 = vk[i];
	      var m0 = (tk1 - tk) * bk[i];
	      var p1 = vk1[i];
	      var m1 = (tk1 - tk) * ak1[i];
	      var pti = (Math.pow(t, 3) * 2 - Math.pow(t, 2) * 3 + 1) * p0 + (Math.pow(t, 3) - Math.pow(t, 2) * 2 + t) * m0 + (-Math.pow(t, 3) * 2 + Math.pow(t, 2) * 3) * p1 + (Math.pow(t, 3) - Math.pow(t, 2)) * m1;
	      pt.push(pti);
	    }

	    return pt;
	  },
	  getAnimationClip: function getAnimationClip(gltf, node, time) {
	    var w = gltf.nodes[node].weights || (gltf.nodes[node].meshes ? gltf.nodes[node].meshes[0].weights : undefined);

	    var trsw = this._getTRSW(gltf, {
	      T: [0, 0, 0],
	      R: [0, 0, 0, 1],
	      S: [1, 1, 1],
	      W: w
	    }, node, time);

	    var trs = fromRotationTranslationScale([], trsw.R, trsw.T, trsw.S);
	    var weights = trsw.W;
	    return {
	      trs: trs,
	      weights: weights
	    };
	  },
	  getTimeSpan: function getTimeSpan(gltf) {
	    if (!gltf.animations) {
	      return null;
	    }

	    var max$$1 = -Infinity,
	        min$$1 = Infinity;
	    var animations = gltf.animations;
	    animations.forEach(function (animation) {
	      var channels = animation.channels;

	      for (var i = 0; i < channels.length; i++) {
	        var channel = channels[i];
	        var sampler = animation.samplers[channel.sampler];
	        var input = sampler.input.array;

	        if (input[input.length - 1] > max$$1) {
	          max$$1 = input[input.length - 1];
	        }

	        if (input[0] < min$$1) {
	          min$$1 = input[0];
	        }
	      }
	    });
	    return {
	      max: max$$1,
	      min: min$$1
	    };
	  }
	};

	var canvas = typeof document === 'undefined' ? null : document.createElement('canvas');

	var GLTFLoader = function () {
	  function GLTFLoader(rootPath, gltf, options) {
	    this.options = options || {};

	    if (gltf.buffer instanceof ArrayBuffer) {
	      var _GLBReader$read = GLBReader.read(gltf.buffer, gltf.byteOffset),
	          json = _GLBReader$read.json,
	          glbBuffer = _GLBReader$read.glbBuffer;

	      this._init(rootPath, json, glbBuffer);
	    } else {
	      this._init(rootPath, gltf);
	    }
	  }

	  var _proto = GLTFLoader.prototype;

	  _proto.load = function load() {
	    var gltf = this._loadScene();

	    var animations = this._loadAnimations();

	    return Promise$1.all([gltf, animations]).then(function (fullfilled) {
	      fullfilled[0].animations = fullfilled[1];
	      return fullfilled[0];
	    });
	  };

	  GLTFLoader.getAnimationClip = function getAnimationClip(gltf, node, time) {
	    return AnimationClip.getAnimationClip(gltf, node, time);
	  };

	  GLTFLoader.getAnimationTimeSpan = function getAnimationTimeSpan(gltf) {
	    return AnimationClip.getTimeSpan(gltf);
	  };

	  _proto._init = function _init(rootPath, gltf, glbBuffer) {
	    this.gltf = gltf;
	    this.version = gltf.asset ? +gltf.asset.version : 1;
	    this.rootPath = rootPath;
	    this.glbBuffer = glbBuffer;
	    this.buffers = {};
	    this.requests = {};
	    this.accessor = new Accessor(rootPath, gltf, glbBuffer);
	    this.options.requestImage = this.options.requestImage || requestImage;

	    if (this.version === 2) {
	      this.adapter = new V2(rootPath, gltf, glbBuffer, this.options.requestImage);
	    } else {
	      this.adapter = new V1(rootPath, gltf);
	    }
	  };

	  _proto._parseNodes = function _parseNodes(node, nodeMap) {
	    var _this = this;

	    if (node.children && node.children.length > 0) {
	      if (!isNumber(node.children[0]) && !isString(node.children[0])) {
	        return node;
	      }

	      var children = node.children.map(function (c) {
	        var childNode = nodeMap[c];
	        childNode.nodeIndex = c;
	        return _this._parseNodes(childNode, nodeMap);
	      });
	      node.children = children;
	    }

	    if (defined(node.skin)) {
	      var skinJoints = node.skin.joints;

	      if (skinJoints && skinJoints.length && isNumber(skinJoints[0])) {
	        var joints = node.skin.joints.map(function (j) {
	          return nodeMap[j];
	        });
	        node.skin.joints = joints;
	      }
	    }

	    return node;
	  };

	  _proto._loadScene = function _loadScene() {
	    var _this2 = this;

	    return this._loadNodes().then(function (nodeMap) {
	      var scenes = _this2.scenes = [];
	      var defaultScene;

	      for (var index in nodeMap) {
	        nodeMap[index] = _this2._parseNodes(nodeMap[index], nodeMap);
	        nodeMap[index].nodeIndex = Number(index) ? Number(index) : index;
	      }

	      _this2.adapter.iterate(function (key, sceneJSON, idx) {
	        var scene = {};
	        if (sceneJSON.name) scene.name = sceneJSON.name;

	        if (sceneJSON.nodes) {
	          scene.nodes = sceneJSON.nodes.map(function (n) {
	            return nodeMap[n];
	          });
	        }

	        if (_this2.gltf.scene === key) {
	          defaultScene = idx;
	        }

	        scenes.push(scene);
	      }, 'scenes');

	      var gltf = {
	        scene: defaultScene,
	        scenes: scenes,
	        nodes: nodeMap,
	        meshes: _this2.meshes,
	        skins: _this2.skins
	      };

	      if (_this2.gltf.extensions) {
	        gltf.extensions = _this2.gltf.extensions;
	      }

	      return gltf;
	    });
	  };

	  _proto._loadNodes = function _loadNodes() {
	    var _this3 = this;

	    var promise = this._loadMeshes();

	    return promise.then(function () {
	      var nodes = _this3.nodes = {};

	      _this3.adapter.iterate(function (key, nodeJSON) {
	        var node = _this3.adapter.createNode(nodeJSON, _this3.meshes, _this3.skins);

	        nodes[key] = node;
	      }, 'nodes');

	      return nodes;
	    });
	  };

	  _proto._loadSkins = function _loadSkins() {
	    var _this4 = this;

	    this.skins = {};
	    var promises = [];
	    this.adapter.iterate(function (key, skinJSON, index) {
	      promises.push(_this4._loadSkin(skinJSON).then(function (skin) {
	        skin.index = index;
	        _this4.skins[key] = skin;
	      }));
	    }, 'skins');
	    return promises;
	  };

	  _proto._loadSkin = function _loadSkin(skin) {
	    var inverseBindMatrices = skin.inverseBindMatrices;
	    return this.accessor._requestData('inverseBindMatrices', inverseBindMatrices).then(function (res) {
	      skin.inverseBindMatrices = res;
	      return skin;
	    });
	  };

	  _proto._loadAnimations = function _loadAnimations() {
	    var animations = this.gltf.animations;
	    var promise = defined(animations) ? this.adapter.getAnimations(animations) : null;
	    return promise;
	  };

	  _proto._loadMeshes = function _loadMeshes() {
	    var _this5 = this;

	    this.meshes = {};
	    var promises = [];
	    this.adapter.iterate(function (key, meshJSON, index) {
	      promises.push(_this5._loadMesh(meshJSON).then(function (mesh) {
	        mesh.index = index;
	        _this5.meshes[key] = mesh;
	      }));
	    }, 'meshes');
	    promises = promises.concat(this._loadSkins());
	    return Promise$1.all(promises);
	  };

	  _proto._loadMesh = function _loadMesh(mesh) {
	    var _this6 = this;

	    var primitives = mesh.primitives;
	    var promises = primitives.map(function (p) {
	      return _this6._loadPrimitive(p);
	    });
	    return Promise$1.all(promises).then(function (primitives) {
	      var out = {};
	      extend(out, mesh);
	      out.primitives = primitives;
	      return out;
	    });
	  };

	  _proto._loadPrimitive = function _loadPrimitive(primJSON) {
	    var _this7 = this;

	    var promises = [];
	    var attributes = primJSON.attributes;

	    var matPromise = this._loadMaterial(primJSON);

	    if (matPromise) promises.push(matPromise);
	    var material = null;

	    for (var attr in attributes) {
	      var promise = this.accessor._requestData(attr, attributes[attr]);

	      if (promise) {
	        promises.push(promise);
	      }
	    }

	    if (defined(primJSON.indices)) {
	      var _promise = this.accessor._requestData('indices', primJSON.indices);

	      if (_promise) {
	        promises.push(_promise);
	      }
	    }

	    if (defined(primJSON.targets)) {
	      for (var i = 0; i < primJSON.targets.length; i++) {
	        var target = primJSON.targets[i];

	        for (var _attr in target) {
	          var _promise2 = this.accessor._requestData(_attr + "_" + i, target[_attr]);

	          if (_promise2) {
	            promises.push(_promise2);
	          }
	        }
	      }
	    }

	    return Promise$1.all(promises).then(function (assets) {
	      var indices;
	      _this7.transferables = [];
	      var attrData = assets.reduce(function (accumulator, currentValue) {
	        if (currentValue.material) {
	          material = currentValue.material;

	          if (currentValue.transferables) {
	            currentValue.transferables.forEach(function (buffer) {
	              if (_this7.transferables.indexOf(buffer) < 0) {
	                _this7.transferables.push(buffer);
	              }
	            });
	          }
	        } else {
	          if (currentValue.name === 'indices') {
	            indices = currentValue.array;
	          } else {
	            accumulator[currentValue.name] = {
	              array: currentValue.array,
	              itemSize: currentValue.itemSize,
	              accessorName: currentValue.accessorName
	            };
	          }

	          if (_this7.transferables.indexOf(currentValue.array.buffer) < 0) {
	            _this7.transferables.push(currentValue.array.buffer);
	          }
	        }

	        return accumulator;
	      }, {});
	      var primitive = {
	        attributes: attrData,
	        material: material
	      };
	      if (indices) primitive.indices = indices;
	      primitive.mode = defined(primJSON.mode) ? primJSON.mode : 4;
	      if (defined(primJSON.extras)) primitive.extras = primJSON.extras;
	      return primitive;
	    });
	  };

	  _proto._loadMaterial = function _loadMaterial(primJSON) {
	    var material = primJSON.material;

	    if (this.version === 2) {
	      if (!defined(material)) {
	        return null;
	      }

	      var matPromise = this.adapter.getMaterial(material);
	      return matPromise;
	    }

	    var texture = this.adapter.getBaseColorTexture(material);

	    if (!texture) {
	      return null;
	    }

	    var promise = this._loadImage(texture.source);

	    return promise.then(function (image) {
	      var transferables = [image.buffer];
	      var source = texture.source;
	      image.index = source;
	      extend(texture.source, source);
	      texture.source.image = image;
	      var result = {
	        baseColorTexture: texture
	      };
	      if (material.name) result.name = material.name;
	      if (material.extensions) result.extensions = material.extensions;

	      if (result.extensions) {
	        delete result.extensions['KHR_binary_glTF'];
	        delete result.extensions['binary_glTF'];

	        if (Object.keys(result.extensions).length === 0) {
	          delete result.extensions;
	        }
	      }

	      if (material.extras) result.extras = material.extras;
	      return {
	        material: result,
	        transferables: transferables
	      };
	    });
	  };

	  _proto._loadImage = function _loadImage(source) {
	    var _this8 = this;

	    if (source.bufferView || source.extensions && (source.extensions['KHR_binary_glTF'] || source.extensions['binary_glTF'])) {
	      var binary = source.bufferView ? source : source.extensions['KHR_binary_glTF'] || source.extensions['binary_glTF'];

	      if (source.extensions) {
	        source.mimeType = binary.mimeType;
	        source.width = binary.width;
	        source.height = binary.height;
	      }

	      if (this.buffers[binary.bufferView]) {
	        return Promise$1.resolve(this.buffers[binary.bufferView]);
	      }

	      var bufferView = this.gltf.bufferViews[binary.bufferView];
	      var start = (bufferView.byteOffset || 0) + this.glbBuffer.byteOffset;
	      var length = bufferView.byteLength;
	      var buffer = this.buffers[binary.bufferView] = new Uint8Array(this.glbBuffer.buffer, start, length);
	      return Promise$1.resolve(buffer);
	    } else {
	      var bin = source.uri;
	      var url = this.rootPath + '/' + bin;

	      if (this.requests[url]) {
	        return this.requests[url].then(function () {
	          return _this8.buffers[url];
	        });
	      }

	      var promise = this.requests[url] = Ajax.getArrayBuffer(url, null).then(function (response) {
	        var buffer = response.data;
	        _this8.buffers[url] = buffer;
	        return new Uint8Array(buffer);
	      });
	      return promise;
	    }
	  };

	  return GLTFLoader;
	}();

	function requestImage(url, cb) {
	  var image = new Image();

	  image.onload = function () {
	    if (!canvas) {
	      cb(new Error('There is no canvas to draw image!'));
	      return;
	    }

	    canvas.width = image.width;
	    canvas.height = image.height;
	    var ctx = canvas.getContext('2d');
	    ctx.drawImage(image, 0, 0, image.width, image.height);
	    var imgData = ctx.getImageData(0, 0, image.width, image.height);
	    var result = {
	      width: image.width,
	      height: image.height,
	      data: new Uint8Array(imgData.data)
	    };
	    cb(null, result);
	  };

	  image.onerror = function (err) {
	    cb(err);
	  };

	  image.src = url;
	}

	exports.GLTFLoader = GLTFLoader;
	exports.Ajax = Ajax;

	Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
